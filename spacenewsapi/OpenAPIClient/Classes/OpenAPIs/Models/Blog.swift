//
// Blog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Blog: Codable, JSONEncodable, Hashable {

    static let titleRule = StringRule(minLength: nil, maxLength: 250, pattern: nil)
    static let urlRule = StringRule(minLength: nil, maxLength: 200, pattern: nil)
    static let imageUrlRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public var id: Int
    public var title: String
    public var url: String
    public var imageUrl: String
    public var newsSite: String
    public var summary: String
    public var publishedAt: Date
    public var updatedAt: Date
    public var featured: Bool?
    public var launches: [Launch]
    public var events: [Event]

    public init(id: Int, title: String, url: String, imageUrl: String, newsSite: String, summary: String, publishedAt: Date, updatedAt: Date, featured: Bool? = nil, launches: [Launch], events: [Event]) {
        self.id = id
        self.title = title
        self.url = url
        self.imageUrl = imageUrl
        self.newsSite = newsSite
        self.summary = summary
        self.publishedAt = publishedAt
        self.updatedAt = updatedAt
        self.featured = featured
        self.launches = launches
        self.events = events
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case url
        case imageUrl = "image_url"
        case newsSite = "news_site"
        case summary
        case publishedAt = "published_at"
        case updatedAt = "updated_at"
        case featured
        case launches
        case events
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(url, forKey: .url)
        try container.encode(imageUrl, forKey: .imageUrl)
        try container.encode(newsSite, forKey: .newsSite)
        try container.encode(summary, forKey: .summary)
        try container.encode(publishedAt, forKey: .publishedAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(featured, forKey: .featured)
        try container.encode(launches, forKey: .launches)
        try container.encode(events, forKey: .events)
    }
}

